"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@aws-cdk/assert/jest");
const have_resource_1 = require("@aws-cdk/assert/lib/assertions/have-resource");
const ec2 = require("@aws-cdk/aws-ec2");
const ecr = require("@aws-cdk/aws-ecr");
const ecs = require("@aws-cdk/aws-ecs");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/core");
const batch = require("../lib");
describe('Batch Job Definition', () => {
    let stack;
    let jobDefProps;
    beforeEach(() => {
        stack = new cdk.Stack();
        const role = new iam.Role(stack, 'job-role', {
            assumedBy: new iam.ServicePrincipal('batch.amazonaws.com'),
        });
        const linuxParams = new ecs.LinuxParameters(stack, 'job-linux-params', {
            initProcessEnabled: true,
            sharedMemorySize: 1,
        });
        jobDefProps = {
            jobDefinitionName: 'test-job',
            container: {
                command: ['echo "Hello World"'],
                environment: {
                    foo: 'bar',
                },
                jobRole: role,
                gpuCount: 1,
                image: ecs.EcrImage.fromRegistry('docker/whalesay'),
                instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.MICRO),
                linuxParams,
                memoryLimitMiB: 1,
                mountPoints: new Array(),
                privileged: true,
                readOnly: true,
                ulimits: new Array(),
                user: 'root',
                vcpus: 2,
                volumes: new Array(),
            },
            nodeProps: {
                count: 2,
                mainNode: 1,
                rangeProps: new Array(),
            },
            parameters: {
                foo: 'bar',
            },
            retryAttempts: 2,
            timeout: cdk.Duration.seconds(30),
        };
    });
    test('renders the correct cloudformation properties', () => {
        // WHEN
        new batch.JobDefinition(stack, 'job-def', jobDefProps);
        // THEN
        expect(stack).toHaveResourceLike('AWS::Batch::JobDefinition', {
            JobDefinitionName: jobDefProps.jobDefinitionName,
            ContainerProperties: jobDefProps.container ? {
                Command: jobDefProps.container.command,
                Environment: [
                    {
                        Name: 'foo',
                        Value: 'bar',
                    },
                ],
                InstanceType: jobDefProps.container.instanceType ? jobDefProps.container.instanceType.toString() : '',
                LinuxParameters: {},
                Memory: jobDefProps.container.memoryLimitMiB,
                MountPoints: [],
                Privileged: jobDefProps.container.privileged,
                ReadonlyRootFilesystem: jobDefProps.container.readOnly,
                ResourceRequirements: [{ Type: 'GPU', Value: String(jobDefProps.container.gpuCount) }],
                Ulimits: [],
                User: jobDefProps.container.user,
                Vcpus: jobDefProps.container.vcpus,
                Volumes: [],
            } : undefined,
            NodeProperties: jobDefProps.nodeProps ? {
                MainNode: jobDefProps.nodeProps.mainNode,
                NodeRangeProperties: [],
                NumNodes: jobDefProps.nodeProps.count,
            } : undefined,
            Parameters: {
                foo: 'bar',
            },
            RetryStrategy: {
                Attempts: jobDefProps.retryAttempts,
            },
            Timeout: {
                AttemptDurationSeconds: jobDefProps.timeout ? jobDefProps.timeout.toSeconds() : -1,
            },
            Type: 'container',
        }, have_resource_1.ResourcePart.Properties);
    });
    test('can use an ecr image', () => {
        // WHEN
        const repo = new ecr.Repository(stack, 'image-repo');
        new batch.JobDefinition(stack, 'job-def', {
            container: {
                image: ecs.ContainerImage.fromEcrRepository(repo),
            },
        });
        // THEN
        expect(stack).toHaveResourceLike('AWS::Batch::JobDefinition', {
            ContainerProperties: {
                Image: {
                    'Fn::Join': [
                        '',
                        [
                            {
                                'Fn::Select': [
                                    4,
                                    {
                                        'Fn::Split': [
                                            ':',
                                            {
                                                'Fn::GetAtt': [
                                                    'imagerepoD116FAF0',
                                                    'Arn',
                                                ],
                                            },
                                        ],
                                    },
                                ],
                            },
                            '.dkr.ecr.',
                            {
                                'Fn::Select': [
                                    3,
                                    {
                                        'Fn::Split': [
                                            ':',
                                            {
                                                'Fn::GetAtt': [
                                                    'imagerepoD116FAF0',
                                                    'Arn',
                                                ],
                                            },
                                        ],
                                    },
                                ],
                            },
                            '.',
                            {
                                Ref: 'AWS::URLSuffix',
                            },
                            '/',
                            {
                                Ref: 'imagerepoD116FAF0',
                            },
                            ':latest',
                        ],
                    ],
                },
                Memory: 4,
                Privileged: false,
                ReadonlyRootFilesystem: false,
                Vcpus: 1,
            },
        }, have_resource_1.ResourcePart.Properties);
    });
    test('can use a registry image', () => {
        // WHEN
        new batch.JobDefinition(stack, 'job-def', {
            container: {
                image: ecs.ContainerImage.fromRegistry('docker/whalesay'),
            },
        });
        // THEN
        expect(stack).toHaveResourceLike('AWS::Batch::JobDefinition', {
            ContainerProperties: {
                Image: 'docker/whalesay',
                Memory: 4,
                Privileged: false,
                ReadonlyRootFilesystem: false,
                Vcpus: 1,
            },
        }, have_resource_1.ResourcePart.Properties);
    });
    test('can be imported from an ARN', () => {
        // WHEN
        const importedJob = batch.JobDefinition.fromJobDefinitionArn(stack, 'job-def-clone', 'arn:aws:batch:us-east-1:123456789012:job-definition/job-def-name:1');
        // THEN
        expect(importedJob.jobDefinitionName).toEqual('job-def-name:1');
        expect(importedJob.jobDefinitionArn).toEqual('arn:aws:batch:us-east-1:123456789012:job-definition/job-def-name:1');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9iLWRlZmluaXRpb24udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImpvYi1kZWZpbml0aW9uLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxnQ0FBOEI7QUFDOUIsZ0ZBQTRFO0FBQzVFLHdDQUF3QztBQUN4Qyx3Q0FBd0M7QUFDeEMsd0NBQXdDO0FBQ3hDLHdDQUF3QztBQUN4QyxxQ0FBcUM7QUFDckMsZ0NBQWdDO0FBRWhDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7SUFDcEMsSUFBSSxLQUFnQixDQUFDO0lBQ3JCLElBQUksV0FBcUMsQ0FBQztJQUUxQyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRXhCLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFO1lBQzNDLFNBQVMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQztTQUMzRCxDQUFDLENBQUM7UUFFSCxNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLGtCQUFrQixFQUFFO1lBQ3JFLGtCQUFrQixFQUFFLElBQUk7WUFDeEIsZ0JBQWdCLEVBQUUsQ0FBQztTQUNwQixDQUFDLENBQUM7UUFFSCxXQUFXLEdBQUc7WUFDWixpQkFBaUIsRUFBRSxVQUFVO1lBQzdCLFNBQVMsRUFBRTtnQkFDVCxPQUFPLEVBQUUsQ0FBRSxvQkFBb0IsQ0FBRTtnQkFDakMsV0FBVyxFQUFFO29CQUNYLEdBQUcsRUFBRSxLQUFLO2lCQUNYO2dCQUNELE9BQU8sRUFBRSxJQUFJO2dCQUNiLFFBQVEsRUFBRSxDQUFDO2dCQUNYLEtBQUssRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQztnQkFDbkQsWUFBWSxFQUFFLEdBQUcsQ0FB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TUFBTSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxvRUFBb0UsQ0FBQyxDQUFDO0lBQ3JILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ0Bhd3MtY2RrL2Fzc2VydC9qZXN0JztcbmltcG9ydCB7IFJlc291cmNlUGFydCB9IGZyb20gJ0Bhd3MtY2RrL2Fzc2VydC9saWIvYXNzZXJ0aW9ucy9oYXZlLXJlc291cmNlJztcbmltcG9ydCAqIGFzIGVjMiBmcm9tICdAYXdzLWNkay9hd3MtZWMyJztcbmltcG9ydCAqIGFzIGVjciBmcm9tICdAYXdzLWNkay9hd3MtZWNyJztcbmltcG9ydCAqIGFzIGVjcyBmcm9tICdAYXdzLWNkay9hd3MtZWNzJztcbmltcG9ydCAqIGFzIGlhbSBmcm9tICdAYXdzLWNkay9hd3MtaWFtJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCAqIGFzIGJhdGNoIGZyb20gJy4uL2xpYic7XG5cbmRlc2NyaWJlKCdCYXRjaCBKb2IgRGVmaW5pdGlvbicsICgpID0+IHtcbiAgbGV0IHN0YWNrOiBjZGsuU3RhY2s7XG4gIGxldCBqb2JEZWZQcm9wczogYmF0Y2guSm9iRGVmaW5pdGlvblByb3BzO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gICAgY29uc3Qgcm9sZSA9IG5ldyBpYW0uUm9sZShzdGFjaywgJ2pvYi1yb2xlJywge1xuICAgICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2JhdGNoLmFtYXpvbmF3cy5jb20nKSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGxpbnV4UGFyYW1zID0gbmV3IGVjcy5MaW51eFBhcmFtZXRlcnMoc3RhY2ssICdqb2ItbGludXgtcGFyYW1zJywge1xuICAgICAgaW5pdFByb2Nlc3NFbmFibGVkOiB0cnVlLFxuICAgICAgc2hhcmVkTWVtb3J5U2l6ZTogMSxcbiAgICB9KTtcblxuICAgIGpvYkRlZlByb3BzID0ge1xuICAgICAgam9iRGVmaW5pdGlvbk5hbWU6ICd0ZXN0LWpvYicsXG4gICAgICBjb250YWluZXI6IHtcbiAgICAgICAgY29tbWFuZDogWyAnZWNobyBcIkhlbGxvIFdvcmxkXCInIF0sXG4gICAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgICAgZm9vOiAnYmFyJyxcbiAgICAgICAgfSxcbiAgICAgICAgam9iUm9sZTogcm9sZSxcbiAgICAgICAgZ3B1Q291bnQ6IDEsXG4gICAgICAgIGltYWdlOiBlY3MuRWNySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdkb2NrZXIvd2hhbGVzYXknKSxcbiAgICAgICAgaW5zdGFuY2VUeXBlOiBlYzIuSW5zdGFuY2VUeXBlLm9mKGVjMi5JbnN0YW5jZUNsYXNzLlQyLCBlYzIuSW5zdGFuY2VTaXplLk1JQ1JPKSxcbiAgICAgICAgbGludXhQYXJhbXMsXG4gICAgICAgIG1lbW9yeUxpbWl0TWlCOiAxLFxuICAgICAgICBtb3VudFBvaW50czogbmV3IEFycmF5PGVjcy5Nb3VudFBvaW50PigpLFxuICAgICAgICBwcml2aWxlZ2VkOiB0cnVlLFxuICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgdWxpbWl0czogbmV3IEFycmF5PGVjcy5VbGltaXQ+KCksXG4gICAgICAgIHVzZXI6ICdyb290JyxcbiAgICAgICAgdmNwdXM6IDIsXG4gICAgICAgIHZvbHVtZXM6IG5ldyBBcnJheTxlY3MuVm9sdW1lPigpLFxuICAgICAgfSxcbiAgICAgIG5vZGVQcm9wczoge1xuICAgICAgICBjb3VudDogMixcbiAgICAgICAgbWFpbk5vZGU6IDEsXG4gICAgICAgIHJhbmdlUHJvcHM6IG5ldyBBcnJheTxiYXRjaC5JTm9kZVJhbmdlUHJvcHM+KCksXG4gICAgICB9LFxuICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICBmb286ICdiYXInLFxuICAgICAgfSxcbiAgICAgIHJldHJ5QXR0ZW1wdHM6IDIsXG4gICAgICB0aW1lb3V0OiBjZGsuRHVyYXRpb24uc2Vjb25kcygzMCksXG4gICAgfTtcbiAgfSk7XG5cbiAgdGVzdCgncmVuZGVycyB0aGUgY29ycmVjdCBjbG91ZGZvcm1hdGlvbiBwcm9wZXJ0aWVzJywgKCkgPT4ge1xuICAgIC8vIFdIRU5cbiAgICBuZXcgYmF0Y2guSm9iRGVmaW5pdGlvbihzdGFjaywgJ2pvYi1kZWYnLCBqb2JEZWZQcm9wcyk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHN0YWNrKS50b0hhdmVSZXNvdXJjZUxpa2UoJ0FXUzo6QmF0Y2g6OkpvYkRlZmluaXRpb24nLCB7XG4gICAgICBKb2JEZWZpbml0aW9uTmFtZTogam9iRGVmUHJvcHMuam9iRGVmaW5pdGlvbk5hbWUsXG4gICAgICBDb250YWluZXJQcm9wZXJ0aWVzOiBqb2JEZWZQcm9wcy5jb250YWluZXIgPyB7XG4gICAgICAgIENvbW1hbmQ6IGpvYkRlZlByb3BzLmNvbnRhaW5lci5jb21tYW5kLFxuICAgICAgICBFbnZpcm9ubWVudDogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIE5hbWU6ICdmb28nLFxuICAgICAgICAgICAgVmFsdWU6ICdiYXInLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIEluc3RhbmNlVHlwZTogam9iRGVmUHJvcHMuY29udGFpbmVyLmluc3RhbmNlVHlwZSA/IGpvYkRlZlByb3BzLmNvbnRhaW5lci5pbnN0YW5jZVR5cGUudG9TdHJpbmcoKSA6ICcnLFxuICAgICAgICBMaW51eFBhcmFtZXRlcnM6IHt9LFxuICAgICAgICBNZW1vcnk6IGpvYkRlZlByb3BzLmNvbnRhaW5lci5tZW1vcnlMaW1pdE1pQixcbiAgICAgICAgTW91bnRQb2ludHM6IFtdLFxuICAgICAgICBQcml2aWxlZ2VkOiBqb2JEZWZQcm9wcy5jb250YWluZXIucHJpdmlsZWdlZCxcbiAgICAgICAgUmVhZG9ubHlSb290RmlsZXN5c3RlbTogam9iRGVmUHJvcHMuY29udGFpbmVyLnJlYWRPbmx5LFxuICAgICAgICBSZXNvdXJjZVJlcXVpcmVtZW50czogW3sgVHlwZTogJ0dQVScsIFZhbHVlOiBTdHJpbmcoam9iRGVmUHJvcHMuY29udGFpbmVyLmdwdUNvdW50KX1dLFxuICAgICAgICBVbGltaXRzOiBbXSxcbiAgICAgICAgVXNlcjogam9iRGVmUHJvcHMuY29udGFpbmVyLnVzZXIsXG4gICAgICAgIFZjcHVzOiBqb2JEZWZQcm9wcy5jb250YWluZXIudmNwdXMsXG4gICAgICAgIFZvbHVtZXM6IFtdLFxuICAgICAgfSA6IHVuZGVmaW5lZCxcbiAgICAgIE5vZGVQcm9wZXJ0aWVzOiBqb2JEZWZQcm9wcy5ub2RlUHJvcHMgPyB7XG4gICAgICAgIE1haW5Ob2RlOiBqb2JEZWZQcm9wcy5ub2RlUHJvcHMubWFpbk5vZGUsXG4gICAgICAgIE5vZGVSYW5nZVByb3BlcnRpZXM6IFtdLFxuICAgICAgICBOdW1Ob2Rlczogam9iRGVmUHJvcHMubm9kZVByb3BzLmNvdW50LFxuICAgICAgfSA6IHVuZGVmaW5lZCxcbiAgICAgIFBhcmFtZXRlcnM6IHtcbiAgICAgICAgZm9vOiAnYmFyJyxcbiAgICAgIH0sXG4gICAgICBSZXRyeVN0cmF0ZWd5OiB7XG4gICAgICAgIEF0dGVtcHRzOiBqb2JEZWZQcm9wcy5yZXRyeUF0dGVtcHRzLFxuICAgICAgfSxcbiAgICAgIFRpbWVvdXQ6IHtcbiAgICAgICAgQXR0ZW1wdER1cmF0aW9uU2Vjb25kczogam9iRGVmUHJvcHMudGltZW91dCA/IGpvYkRlZlByb3BzLnRpbWVvdXQudG9TZWNvbmRzKCkgOiAtMSxcbiAgICAgIH0sXG4gICAgICBUeXBlOiAnY29udGFpbmVyJyxcbiAgICB9LCBSZXNvdXJjZVBhcnQuUHJvcGVydGllcyk7XG4gIH0pO1xuICB0ZXN0KCdjYW4gdXNlIGFuIGVjciBpbWFnZScsICgpID0+IHtcbiAgICAvLyBXSEVOXG4gICAgY29uc3QgcmVwbyA9IG5ldyBlY3IuUmVwb3NpdG9yeShzdGFjaywgJ2ltYWdlLXJlcG8nKTtcblxuICAgIG5ldyBiYXRjaC5Kb2JEZWZpbml0aW9uKHN0YWNrLCAnam9iLWRlZicsIHtcbiAgICAgIGNvbnRhaW5lcjoge1xuICAgICAgICBpbWFnZTogZWNzLkNvbnRhaW5lckltYWdlLmZyb21FY3JSZXBvc2l0b3J5KHJlcG8pLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3Qoc3RhY2spLnRvSGF2ZVJlc291cmNlTGlrZSgnQVdTOjpCYXRjaDo6Sm9iRGVmaW5pdGlvbicsIHtcbiAgICAgIENvbnRhaW5lclByb3BlcnRpZXM6IHtcbiAgICAgICAgSW1hZ2U6IHtcbiAgICAgICAgICAnRm46OkpvaW4nOiBbXG4gICAgICAgICAgICAnJyxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICdGbjo6U2VsZWN0JzogW1xuICAgICAgICAgICAgICAgICAgNCxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgJ0ZuOjpTcGxpdCc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAnOicsXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbWFnZXJlcG9EMTE2RkFGMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdBcm4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAnLmRrci5lY3IuJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICdGbjo6U2VsZWN0JzogW1xuICAgICAgICAgICAgICAgICAgMyxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgJ0ZuOjpTcGxpdCc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAnOicsXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbWFnZXJlcG9EMTE2RkFGMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdBcm4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAnLicsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBSZWY6ICdBV1M6OlVSTFN1ZmZpeCcsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICcvJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFJlZjogJ2ltYWdlcmVwb0QxMTZGQUYwJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJzpsYXRlc3QnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBNZW1vcnk6IDQsXG4gICAgICAgIFByaXZpbGVnZWQ6IGZhbHNlLFxuICAgICAgICBSZWFkb25seVJvb3RGaWxlc3lzdGVtOiBmYWxzZSxcbiAgICAgICAgVmNwdXM6IDEsXG4gICAgICB9LFxuICAgIH0sIFJlc291cmNlUGFydC5Qcm9wZXJ0aWVzKTtcbiAgfSk7XG5cbiAgdGVzdCgnY2FuIHVzZSBhIHJlZ2lzdHJ5IGltYWdlJywgKCkgPT4ge1xuICAgIC8vIFdIRU5cbiAgICBuZXcgYmF0Y2guSm9iRGVmaW5pdGlvbihzdGFjaywgJ2pvYi1kZWYnLCB7XG4gICAgICBjb250YWluZXI6IHtcbiAgICAgICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ2RvY2tlci93aGFsZXNheScpLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3Qoc3RhY2spLnRvSGF2ZVJlc291cmNlTGlrZSgnQVdTOjpCYXRjaDo6Sm9iRGVmaW5pdGlvbicsIHtcbiAgICAgIENvbnRhaW5lclByb3BlcnRpZXM6IHtcbiAgICAgICAgSW1hZ2U6ICdkb2NrZXIvd2hhbGVzYXknLFxuICAgICAgICBNZW1vcnk6IDQsXG4gICAgICAgIFByaXZpbGVnZWQ6IGZhbHNlLFxuICAgICAgICBSZWFkb25seVJvb3RGaWxlc3lzdGVtOiBmYWxzZSxcbiAgICAgICAgVmNwdXM6IDEsXG4gICAgICB9LFxuICAgIH0sIFJlc291cmNlUGFydC5Qcm9wZXJ0aWVzKTtcbiAgfSk7XG5cbiAgdGVzdCgnY2FuIGJlIGltcG9ydGVkIGZyb20gYW4gQVJOJywgKCkgPT4ge1xuICAgIC8vIFdIRU5cbiAgICBjb25zdCBpbXBvcnRlZEpvYiA9IGJhdGNoLkpvYkRlZmluaXRpb24uZnJvbUpvYkRlZmluaXRpb25Bcm4oc3RhY2ssICdqb2ItZGVmLWNsb25lJyxcbiAgICAgICdhcm46YXdzOmJhdGNoOnVzLWVhc3QtMToxMjM0NTY3ODkwMTI6am9iLWRlZmluaXRpb24vam9iLWRlZi1uYW1lOjEnKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoaW1wb3J0ZWRKb2Iuam9iRGVmaW5pdGlvbk5hbWUpLnRvRXF1YWwoJ2pvYi1kZWYtbmFtZToxJyk7XG4gICAgZXhwZWN0KGltcG9ydGVkSm9iLmpvYkRlZmluaXRpb25Bcm4pLnRvRXF1YWwoJ2Fybjphd3M6YmF0Y2g6dXMtZWFzdC0xOjEyMzQ1Njc4OTAxMjpqb2ItZGVmaW5pdGlvbi9qb2ItZGVmLW5hbWU6MScpO1xuICB9KTtcbn0pO1xuIl19