"use strict";
const assert_1 = require("@aws-cdk/assert");
const lambda = require("@aws-cdk/aws-lambda");
const cdk = require("@aws-cdk/core");
const apigw = require("../lib");
module.exports = {
    'LambdaRestApi defines a REST API with Lambda proxy integration'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const handler = new lambda.Function(stack, 'handler', {
            handler: 'index.handler',
            code: lambda.Code.fromInline('boom'),
            runtime: lambda.Runtime.NODEJS_10_X,
        });
        // WHEN
        const api = new apigw.LambdaRestApi(stack, 'lambda-rest-api', { handler });
        // THEN -- can't customize further
        test.throws(() => {
            api.root.addResource('cant-touch-this');
        });
        // THEN -- template proxies everything
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Resource', {
            'PathPart': '{proxy+}',
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Method', {
            'HttpMethod': 'ANY',
            'ResourceId': {
                'Ref': 'lambdarestapiproxyE3AE07E3',
            },
            'RestApiId': {
                'Ref': 'lambdarestapiAAD10924',
            },
            'AuthorizationType': 'NONE',
            'Integration': {
                'IntegrationHttpMethod': 'POST',
                'Type': 'AWS_PROXY',
                'Uri': {
                    'Fn::Join': [
                        '',
                        [
                            'arn:',
                            {
                                'Ref': 'AWS::Partition',
                            },
                            ':apigateway:',
                            {
                                'Ref': 'AWS::Region',
                            },
                            ':lambda:path/2015-03-31/functions/',
                            {
                                'Fn::GetAtt': [
                                    'handlerE1533BD5',
                                    'Arn',
                                ],
                            },
                            '/invocations',
                        ],
                    ],
                },
            },
        }));
        test.done();
    },
    'LambdaRestApi supports function Alias'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const handler = new lambda.Function(stack, 'handler', {
            handler: 'index.handler',
            code: lambda.Code.fromInline('boom'),
            runtime: lambda.Runtime.NODEJS_10_X,
        });
        const alias = new lambda.Alias(stack, 'alias', {
            aliasName: 'my-alias',
            version: new lambda.Version(stack, 'version', {
                lambda: handler,
            }),
        });
        // WHEN
        const api = new apigw.LambdaRestApi(stack, 'lambda-rest-api', { handler: alias });
        // THEN -- can't customize further
        test.throws(() => {
            api.root.addResource('cant-touch-this');
        });
        // THEN -- template proxies everything
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Resource', {
            'PathPart': '{proxy+}',
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Method', {
            'HttpMethod': 'ANY',
            'ResourceId': {
                'Ref': 'lambdarestapiproxyE3AE07E3',
            },
            'RestApiId': {
                'Ref': 'lambdarestapiAAD10924',
            },
            'AuthorizationType': 'NONE',
            'Integration': {
                'IntegrationHttpMethod': 'POST',
                'Type': 'AWS_PROXY',
                'Uri': {
                    'Fn::Join': [
                        '',
                        [
                            'arn:',
                            {
                                'Ref': 'AWS::Partition',
                            },
                            ':apigateway:',
                            {
                                'Ref': 'AWS::Region',
                            },
                            ':lambda:path/2015-03-31/functions/',
                            {
                                'Ref': 'alias68BF17F5',
                            },
                            '/invocations',
                        ],
                    ],
                },
            },
        }));
        test.done();
    },
    'when "proxy" is set to false, users need to define the model'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const handler = new lambda.Function(stack, 'handler', {
            handler: 'index.handler',
            code: lambda.Code.fromInline('boom'),
            runtime: lambda.Runtime.NODEJS_10_X,
        });
        // WHEN
        const api = new apigw.LambdaRestApi(stack, 'lambda-rest-api', { handler, proxy: false });
        const tasks = api.root.addResource('tasks');
        tasks.addMethod('GET');
        tasks.addMethod('POST');
        // THEN
        assert_1.expect(stack).notTo(assert_1.haveResource('AWS::ApiGateway::Resource', {
            'PathPart': '{proxy+}',
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Resource', {
            PathPart: 'tasks',
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Method', {
            HttpMethod: 'GET',
            ResourceId: { Ref: 'lambdarestapitasks224418C8' },
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Method', {
            HttpMethod: 'POST',
            ResourceId: { Ref: 'lambdarestapitasks224418C8' },
        }));
        test.done();
    },
    'fails if options.defaultIntegration is also set'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const handler = new lambda.Function(stack, 'handler', {
            handler: 'index.handler',
            code: lambda.Code.fromInline('boom'),
            runtime: lambda.Runtime.NODEJS_10_X,
        });
        test.throws(() => new apigw.LambdaRestApi(stack, 'lambda-rest-api', {
            handler,
            options: { defaultIntegration: new apigw.HttpIntegration('https://foo/bar') },
        }), /Cannot specify \"defaultIntegration\" since Lambda integration is automatically defined/);
        test.throws(() => new apigw.LambdaRestApi(stack, 'lambda-rest-api', {
            handler,
            defaultIntegration: new apigw.HttpIntegration('https://foo/bar'),
        }), /Cannot specify \"defaultIntegration\" since Lambda integration is automatically defined/);
        test.done();
    },
    'LambdaRestApi defines a REST API with CORS enabled'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const handler = new lambda.Function(stack, 'handler', {
            handler: 'index.handler',
            code: lambda.Code.fromInline('boom'),
            runtime: lambda.Runtime.NODEJS_10_X,
        });
        // WHEN
        new apigw.LambdaRestApi(stack, 'lambda-rest-api', {
            handler,
            defaultCorsPreflightOptions: {
                allowOrigins: ['https://aws.amazon.com'],
                allowMethods: ['GET', 'PUT'],
            },
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Method', {
            HttpMethod: 'OPTIONS',
            ResourceId: { Ref: 'lambdarestapiproxyE3AE07E3' },
            Integration: {
                IntegrationResponses: [
                    {
                        ResponseParameters: {
                            'method.response.header.Access-Control-Allow-Headers': "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                            'method.response.header.Access-Control-Allow-Origin': "'https://aws.amazon.com'",
                            'method.response.header.Vary': "'Origin'",
                            'method.response.header.Access-Control-Allow-Methods': "'GET,PUT'",
                        },
                        StatusCode: '204',
                    },
                ],
                RequestTemplates: {
                    'application/json': '{ statusCode: 200 }',
                },
                Type: 'MOCK',
            },
            MethodResponses: [
                {
                    ResponseParameters: {
                        'method.response.header.Access-Control-Allow-Headers': true,
                        'method.response.header.Access-Control-Allow-Origin': true,
                        'method.response.header.Vary': true,
                        'method.response.header.Access-Control-Allow-Methods': true,
                    },
                    StatusCode: '204',
                },
            ],
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,