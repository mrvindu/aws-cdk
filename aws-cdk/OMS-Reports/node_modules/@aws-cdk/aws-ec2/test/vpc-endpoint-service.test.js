"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
const nodeunit_shim_1 = require("nodeunit-shim");
// tslint:disable-next-line:max-line-length
const lib_1 = require("../lib");
/**
 * A load balancer that can host a VPC Endpoint Service
 */
class DummyEndpointLoadBalacer {
    constructor(arn) {
        this.loadBalancerArn = arn;
    }
}
nodeunit_shim_1.nodeunitShim({
    'test vpc endpoint service': {
        'create endpoint service with no principals'(test) {
            // GIVEN
            const stack = new core_1.Stack();
            new lib_1.Vpc(stack, 'MyVPC');
            // WHEN
            const lb = new DummyEndpointLoadBalacer('arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/Test/9bn6qkf4e9jrw77a');
            new lib_1.VpcEndpointService(stack, 'EndpointService', {
                vpcEndpointServiceLoadBalancers: [lb],
                acceptanceRequired: false,
                whitelistedPrincipals: [new aws_iam_1.ArnPrincipal('arn:aws:iam::123456789012:root')],
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPCEndpointService', {
                NetworkLoadBalancerArns: ['arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/Test/9bn6qkf4e9jrw77a'],
                AcceptanceRequired: false,
            }));
            assert_1.expect(stack).notTo(assert_1.haveResource('AWS::EC2::VPCEndpointServicePermissions', {
                ServiceId: {
                    Ref: 'EndpointServiceED36BE1F',
                },
                AllowedPrincipals: [],
            }));
            test.done();
        },
        'create endpoint service with a principal'(test) {
            // GIVEN
            const stack = new core_1.Stack();
            // WHEN
            const lb = new DummyEndpointLoadBalacer('arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/Test/9bn6qkf4e9jrw77a');
            new lib_1.VpcEndpointService(stack, 'EndpointService', {
                vpcEndpointServiceLoadBalancers: [lb],
                acceptanceRequired: false,
                whitelistedPrincipals: [new aws_iam_1.ArnPrincipal('arn:aws:iam::123456789012:root')],
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPCEndpointService', {
                NetworkLoadBalancerArns: ['arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/Test/9bn6qkf4e9jrw77a'],
                AcceptanceRequired: false,
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPCEndpointServicePermissions', {
                ServiceId: {
                    Ref: 'EndpointServiceED36BE1F',
                },
                AllowedPrincipals: ['arn:aws:iam::123456789012:root'],
            }));
            test.done();
        },
        'with acceptance requried'(test) {
            // GIVEN
            const stack = new core_1.Stack();
            // WHEN
            const lb = new DummyEndpointLoadBalacer('arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/Test/9bn6qkf4e9jrw77a');
            new lib_1.VpcEndpointService(stack, 'EndpointService', {
                vpcEndpointServiceLoadBalancers: [lb],
                acceptanceRequired: true,
                whitelistedPrincipals: [new aws_iam_1.ArnPrincipal('arn:aws:iam::123456789012:root')],
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPCEndpointService', {
                NetworkLoadBalancerArns: ['arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/Test/9bn6qkf4e9jrw77a'],
                AcceptanceRequired: true,
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPCEndpointServicePermissions', {
                ServiceId: {
                    Ref: 'EndpointServiceED36BE1F',
                },
                AllowedPrincipals: ['arn:aws:iam::123456789012:root'],
            }));
            test.done();
        },
    },
});
//# sourceMappingURL=data:application/json;base64,