import { Test } from 'nodeunit';
declare const _default: {
    'distribution with custom origin adds custom origin'(test: Test): void;
    'most basic distribution'(test: Test): void;
    'distribution with trusted signers on default distribution'(test: Test): void;
    'distribution with ViewerProtocolPolicy set to a non-default value'(test: Test): void;
    'distribution with disabled compression'(test: Test): void;
    'distribution with resolvable lambda-association'(test: Test): void;
    'distribution has a defaultChild'(test: Test): void;
    'allows multiple aliasConfiguration CloudFrontWebDistribution per stack'(test: Test): void;
    viewerCertificate: {
        acmCertificate: {
            'base usage'(test: Test): void;
            'imported certificate fromCertificateArn'(test: Test): void;
            'advanced usage'(test: Test): void;
        };
        iamCertificate: {
            'base usage'(test: Test): void;
            'advanced usage'(test: Test): void;
        };
        cloudFrontDefaultCertificate: {
            'base usage'(test: Test): void;
            'aliases are set'(test: Test): void;
        };
        errors: {
            'throws if both deprecated aliasConfiguration and viewerCertificate'(test: Test): void;
            'throws if invalid security policy for SSL method'(test: Test): void;
            'does not throw if acmCertificate explicitly not in us-east-1'(test: Test): void;
        };
    };
    'edgelambda.amazonaws.com is added to the trust policy of lambda'(test: Test): void;
    'edgelambda.amazonaws.com is not added to lambda role for imported functions'(test: Test): void;
    'geo restriction': {
        success: {
            whitelist(test: Test): void;
            blacklist(test: Test): void;
        };
        error: {
            'throws if locations is empty array'(test: Test): void;
            'throws if locations format is wrong'(test: Test): void;
        };
    };
};
export = _default;
