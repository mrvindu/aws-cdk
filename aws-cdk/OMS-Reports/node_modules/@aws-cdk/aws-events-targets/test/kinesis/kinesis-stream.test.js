"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
const events = require("@aws-cdk/aws-events");
const kinesis = require("@aws-cdk/aws-kinesis");
const core_1 = require("@aws-cdk/core");
const targets = require("../../lib");
describe('KinesisStream event target', () => {
    let stack;
    let stream;
    let streamArn;
    beforeEach(() => {
        stack = new core_1.Stack();
        stream = new kinesis.Stream(stack, 'MyStream');
        streamArn = { 'Fn::GetAtt': ['MyStream5C050E93', 'Arn'] };
    });
    describe('when added to an event rule as a target', () => {
        let rule;
        beforeEach(() => {
            rule = new events.Rule(stack, 'rule', {
                schedule: events.Schedule.expression('rate(1 minute)'),
            });
        });
        describe('with default settings', () => {
            beforeEach(() => {
                rule.addTarget(new targets.KinesisStream(stream));
            });
            test("adds the stream's ARN and role to the targets of the rule", () => {
                assert_1.expect(stack).to(assert_1.haveResource('AWS::Events::Rule', {
                    Targets: [
                        {
                            Arn: streamArn,
                            Id: 'Target0',
                            RoleArn: { 'Fn::GetAtt': ['MyStreamEventsRole5B6CC6AF', 'Arn'] },
                        },
                    ],
                }));
            });
            test("creates a policy that has PutRecord and PutRecords permissions on the stream's ARN", () => {
                assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
                    PolicyDocument: {
                        Statement: [
                            {
                                Action: ['kinesis:PutRecord', 'kinesis:PutRecords'],
                                Effect: 'Allow',
                                Resource: streamArn,
                            },
                        ],
                        Version: '2012-10-17',
                    },
                }));
            });
        });
        describe('with an explicit partition key path', () => {
            beforeEach(() => {
                rule.addTarget(new targets.KinesisStream(stream, {
                    partitionKeyPath: events.EventField.eventId,
                }));
            });
            test('sets the partition key path', () => {
                assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Events::Rule', {
                    Targets: [
                        {
                            Arn: streamArn,
                            Id: 'Target0',
                            RoleArn: { 'Fn::GetAtt': ['MyStreamEventsRole5B6CC6AF', 'Arn'] },
                            KinesisParameters: {
                                PartitionKeyPath: '$.id',
                            },
                        },
                    ],
                }));
            });
        });
        describe('with an explicit message', () => {
            beforeEach(() => {
                rule.addTarget(new targets.KinesisStream(stream, {
                    message: events.RuleTargetInput.fromText('fooBar'),
                }));
            });
            test('sets the input', () => {
                assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Events::Rule', {
                    Targets: [
                        {
                            Arn: streamArn,
                            Id: 'Target0',
                            Input: '"fooBar"',
                        },
                    ],
                }));
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2luZXNpcy1zdHJlYW0udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImtpbmVzaXMtc3RyZWFtLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBeUU7QUFDekUsOENBQThDO0FBQzlDLGdEQUFnRDtBQUNoRCx3Q0FBc0M7QUFDdEMscUNBQXFDO0FBRXJDLFFBQVEsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7SUFDMUMsSUFBSSxLQUFZLENBQUM7SUFDakIsSUFBSSxNQUFzQixDQUFDO0lBQzNCLElBQUksU0FBYyxDQUFDO0lBRW5CLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUNwQixNQUFNLEdBQUcsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMvQyxTQUFTLEdBQUcsRUFBRSxZQUFZLEVBQUUsQ0FBRSxrQkFBa0IsRUFBRSxLQUFLLENBQUUsRUFBRSxDQUFDO0lBQzlELENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsRUFBRTtRQUN2RCxJQUFJLElBQWlCLENBQUM7UUFFdEIsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtnQkFDcEMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDO2FBQ3ZELENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtZQUNyQyxVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNkLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDcEQsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsMkRBQTJELEVBQUUsR0FBRyxFQUFFO2dCQUNyRSxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFZLENBQUMsbUJBQW1CLEVBQUU7b0JBQ2pELE9BQU8sRUFBRTt3QkFDUDs0QkFDRSxHQUFHLEVBQUUsU0FBUzs0QkFDZCxFQUFFLEVBQUUsU0FBUzs0QkFDYixPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBRSw0QkFBNEIsRUFBRSxLQUFLLENBQUUsRUFBRTt5QkFDbkU7cUJBQ0Y7aUJBQ0YsQ0FBQyxDQUFDLENBQUM7WUFDTixDQUFDLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxvRkFBb0YsRUFBRSxHQUFHLEVBQUU7Z0JBQzlGLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyxrQkFBa0IsRUFBRTtvQkFDaEQsY0FBYyxFQUFFO3dCQUNkLFNBQVMsRUFBRTs0QkFDVDtnQ0FDRSxNQUFNLEVBQUUsQ0FBRSxtQkFBbUIsRUFBRSxvQkFBb0IsQ0FBRTtnQ0FDckQsTUFBTSxFQUFFLE9BQU87Z0NBQ2YsUUFBUSxFQUFFLFNBQVM7NkJBQ3BCO3lCQUNGO3dCQUNELE9BQU8sRUFBRSxZQUFZO3FCQUN0QjtpQkFDRixDQUFDLENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO1lBQ25ELFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFO29CQUMvQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU87aUJBQzVDLENBQUMsQ0FBQyxDQUFDO1lBQ04sQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO2dCQUN2QyxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLHlCQUFnQixDQUFDLG1CQUFtQixFQUFFO29CQUNyRCxPQUFPLEVBQUU7d0JBQ1A7NEJBQ0UsR0FBRyxFQUFFLFNBQVM7NEJBQ2QsRUFBRSxFQUFFLFNBQVM7NEJBQ2IsT0FBTyxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUUsNEJBQTRCLEVBQUUsS0FBSyxDQUFFLEVBQUU7NEJBQ2xFLGlCQUFpQixFQUFFO2dDQUNqQixnQkFBZ0IsRUFBRSxNQUFNOzZCQUN6Qjt5QkFDRjtxQkFDRjtpQkFDRixDQUFDLENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsMEJBQTBCLEVBQUUsR0FBRyxFQUFFO1lBQ3hDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFO29CQUMvQyxPQUFPLEVBQUUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO2lCQUNuRCxDQUFDLENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQyxDQUFDO1lBRUgsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtnQkFDMUIsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyx5QkFBZ0IsQ0FBQyxtQkFBbUIsRUFBRTtvQkFDckQsT0FBTyxFQUFFO3dCQUNQOzRCQUNFLEdBQUcsRUFBRSxTQUFTOzRCQUNkLEVBQUUsRUFBRSxTQUFTOzRCQUNiLEtBQUssRUFBRSxVQUFVO3lCQUNsQjtxQkFDRjtpQkFDRixDQUFDLENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhwZWN0LCBoYXZlUmVzb3VyY2UsIGhhdmVSZXNvdXJjZUxpa2UgfSBmcm9tICdAYXdzLWNkay9hc3NlcnQnO1xuaW1wb3J0ICogYXMgZXZlbnRzIGZyb20gJ0Bhd3MtY2RrL2F3cy1ldmVudHMnO1xuaW1wb3J0ICogYXMga2luZXNpcyBmcm9tICdAYXdzLWNkay9hd3Mta2luZXNpcyc7XG5pbXBvcnQgeyBTdGFjayB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgdGFyZ2V0cyBmcm9tICcuLi8uLi9saWInO1xuXG5kZXNjcmliZSgnS2luZXNpc1N0cmVhbSBldmVudCB0YXJnZXQnLCAoKSA9PiB7XG4gIGxldCBzdGFjazogU3RhY2s7XG4gIGxldCBzdHJlYW06IGtpbmVzaXMuU3RyZWFtO1xuICBsZXQgc3RyZWFtQXJuOiBhbnk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBzdHJlYW0gPSBuZXcga2luZXNpcy5TdHJlYW0oc3RhY2ssICdNeVN0cmVhbScpO1xuICAgIHN0cmVhbUFybiA9IHsgJ0ZuOjpHZXRBdHQnOiBbICdNeVN0cmVhbTVDMDUwRTkzJywgJ0FybicgXSB9O1xuICB9KTtcblxuICBkZXNjcmliZSgnd2hlbiBhZGRlZCB0byBhbiBldmVudCBydWxlIGFzIGEgdGFyZ2V0JywgKCkgPT4ge1xuICAgIGxldCBydWxlOiBldmVudHMuUnVsZTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgcnVsZSA9IG5ldyBldmVudHMuUnVsZShzdGFjaywgJ3J1bGUnLCB7XG4gICAgICAgIHNjaGVkdWxlOiBldmVudHMuU2NoZWR1bGUuZXhwcmVzc2lvbigncmF0ZSgxIG1pbnV0ZSknKSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3dpdGggZGVmYXVsdCBzZXR0aW5ncycsICgpID0+IHtcbiAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBydWxlLmFkZFRhcmdldChuZXcgdGFyZ2V0cy5LaW5lc2lzU3RyZWFtKHN0cmVhbSkpO1xuICAgICAgfSk7XG5cbiAgICAgIHRlc3QoXCJhZGRzIHRoZSBzdHJlYW0ncyBBUk4gYW5kIHJvbGUgdG8gdGhlIHRhcmdldHMgb2YgdGhlIHJ1bGVcIiwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZSgnQVdTOjpFdmVudHM6OlJ1bGUnLCB7XG4gICAgICAgICAgVGFyZ2V0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBBcm46IHN0cmVhbUFybixcbiAgICAgICAgICAgICAgSWQ6ICdUYXJnZXQwJyxcbiAgICAgICAgICAgICAgUm9sZUFybjogeyAnRm46OkdldEF0dCc6IFsgJ015U3RyZWFtRXZlbnRzUm9sZTVCNkNDNkFGJywgJ0FybicgXSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9KSk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdChcImNyZWF0ZXMgYSBwb2xpY3kgdGhhdCBoYXMgUHV0UmVjb3JkIGFuZCBQdXRSZWNvcmRzIHBlcm1pc3Npb25zIG9uIHRoZSBzdHJlYW0ncyBBUk5cIiwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZSgnQVdTOjpJQU06OlBvbGljeScsIHtcbiAgICAgICAgICBQb2xpY3lEb2N1bWVudDoge1xuICAgICAgICAgICAgU3RhdGVtZW50OiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBBY3Rpb246IFsgJ2tpbmVzaXM6UHV0UmVjb3JkJywgJ2tpbmVzaXM6UHV0UmVjb3JkcycgXSxcbiAgICAgICAgICAgICAgICBFZmZlY3Q6ICdBbGxvdycsXG4gICAgICAgICAgICAgICAgUmVzb3VyY2U6IHN0cmVhbUFybixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBWZXJzaW9uOiAnMjAxMi0xMC0xNycsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnd2l0aCBhbiBleHBsaWNpdCBwYXJ0aXRpb24ga2V5IHBhdGgnLCAoKSA9PiB7XG4gICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgcnVsZS5hZGRUYXJnZXQobmV3IHRhcmdldHMuS2luZXNpc1N0cmVhbShzdHJlYW0sIHtcbiAgICAgICAgICBwYXJ0aXRpb25LZXlQYXRoOiBldmVudHMuRXZlbnRGaWVsZC5ldmVudElkLFxuICAgICAgICB9KSk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnc2V0cyB0aGUgcGFydGl0aW9uIGtleSBwYXRoJywgKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZUxpa2UoJ0FXUzo6RXZlbnRzOjpSdWxlJywge1xuICAgICAgICAgIFRhcmdldHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgQXJuOiBzdHJlYW1Bcm4sXG4gICAgICAgICAgICAgIElkOiAnVGFyZ2V0MCcsXG4gICAgICAgICAgICAgIFJvbGVBcm46IHsgJ0ZuOjpHZXRBdHQnOiBbICdNeVN0cmVhbUV2ZW50c1JvbGU1QjZDQzZBRicsICdBcm4nIF0gfSxcbiAgICAgICAgICAgICAgS2luZXNpc1BhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgICAgICBQYXJ0aXRpb25LZXlQYXRoOiAnJC5pZCcsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3dpdGggYW4gZXhwbGljaXQgbWVzc2FnZScsICgpID0+IHtcbiAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBydWxlLmFkZFRhcmdldChuZXcgdGFyZ2V0cy5LaW5lc2lzU3RyZWFtKHN0cmVhbSwge1xuICAgICAgICAgIG1lc3NhZ2U6IGV2ZW50cy5SdWxlVGFyZ2V0SW5wdXQuZnJvbVRleHQoJ2Zvb0JhcicpLFxuICAgICAgICB9KSk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnc2V0cyB0aGUgaW5wdXQnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlTGlrZSgnQVdTOjpFdmVudHM6OlJ1bGUnLCB7XG4gICAgICAgICAgVGFyZ2V0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBBcm46IHN0cmVhbUFybixcbiAgICAgICAgICAgICAgSWQ6ICdUYXJnZXQwJyxcbiAgICAgICAgICAgICAgSW5wdXQ6ICdcImZvb0JhclwiJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=