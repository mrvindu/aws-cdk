"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteObject = exports.putObject = exports.onEvent = void 0;
// tslint:disable: no-console
const AWS = require("aws-sdk");
const api = require("./api");
const s3 = new AWS.S3();
async function onEvent(event) {
    switch (event.RequestType) {
        case 'Create':
        case 'Update':
            return await putObject(event);
        case 'Delete':
            return await deleteObject(event);
    }
}
exports.onEvent = onEvent;
async function putObject(event) {
    const bucketName = event.ResourceProperties[api.PROP_BUCKET_NAME];
    if (!bucketName) {
        throw new Error('"BucketName" is required');
    }
    const contents = event.ResourceProperties[api.PROP_CONTENTS];
    if (!contents) {
        throw new Error('"Contents" is required');
    }
    // determine the object key which is the physical ID of the resource.
    // if it was not provided by the user, we generated it using the request ID.
    let objectKey = event.ResourceProperties[api.PROP_OBJECT_KEY] || event.LogicalResourceId + '-' + event.RequestId.replace(/-/g, '') + '.txt';
    // trim trailing `/`
    if (objectKey.startsWith('/')) {
        objectKey = objectKey.substr(1);
    }
    const publicRead = event.ResourceProperties[api.PROP_PUBLIC] || false;
    console.log(`writing s3://${bucketName}/${objectKey}`);
    const resp = await s3.putObject({
        Bucket: bucketName,
        Key: objectKey,
        Body: contents,
        ACL: publicRead ? 'public-read' : undefined,
    }).promise();
    // NOTE: updates to the object key will be handled automatically: a new object will be put and then we return
    // the new name. this will tell cloudformation that the resource has been replaced and it will issue a DELETE
    // for the old object.
    return {
        PhysicalResourceId: objectKey,
        Data: {
            [api.ATTR_OBJECT_KEY]: objectKey,
            [api.ATTR_ETAG]: resp.ETag,
            [api.ATTR_URL]: `https://${bucketName}.s3.amazonaws.com/${objectKey}`,
        },
    };
}
exports.putObject = putObject;
async function deleteObject(event) {
    const bucketName = event.ResourceProperties.BucketName;
    if (!bucketName) {
        throw new Error('"BucketName" is required');
    }
    const objectKey = event.PhysicalResourceId;
    if (!objectKey) {
        throw new Error('PhysicalResourceId expected for DELETE events');
    }
    await s3.deleteObject({
        Bucket: bucketName,
        Key: objectKey,
    }).promise();
}
exports.deleteObject = deleteObject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBNkI7QUFDN0IsK0JBQStCO0FBQy9CLDZCQUE2QjtBQUU3QixNQUFNLEVBQUUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUVqQixLQUFLLFVBQVUsT0FBTyxDQUFDLEtBQStDO0lBQzNFLFFBQVEsS0FBSyxDQUFDLFdBQVcsRUFBRTtRQUN6QixLQUFLLFFBQVEsQ0FBQztRQUNkLEtBQUssUUFBUTtZQUNYLE9BQU8sTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFaEMsS0FBSyxRQUFRO1lBQ1gsT0FBTyxNQUFNLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNwQztBQUNILENBQUM7QUFURCwwQkFTQztBQUVNLEtBQUssVUFBVSxTQUFTLENBQUMsS0FBK0M7SUFDN0UsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2xFLElBQUksQ0FBQyxVQUFVLEVBQUU7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7S0FBRTtJQUVqRSxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzdELElBQUksQ0FBQyxRQUFRLEVBQUU7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7S0FBRTtJQUU3RCxxRUFBcUU7SUFDckUsNEVBQTRFO0lBQzVFLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksS0FBSyxDQUFDLGlCQUFpQixHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBRTVJLG9CQUFvQjtJQUNwQixJQUFJLFNBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDN0IsU0FBUyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakM7SUFFRCxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssQ0FBQztJQUV0RSxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixVQUFVLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQztJQUV2RCxNQUFNLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUM7UUFDOUIsTUFBTSxFQUFFLFVBQVU7UUFDbEIsR0FBRyxFQUFFLFNBQVM7UUFDZCxJQUFJLEVBQUUsUUFBUTtRQUNkLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsU0FBUztLQUM1QyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFFYiw2R0FBNkc7SUFDN0csNkdBQTZHO0lBQzdHLHNCQUFzQjtJQUV0QixPQUFPO1FBQ0wsa0JBQWtCLEVBQUUsU0FBUztRQUM3QixJQUFJLEVBQUU7WUFDSixDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFBRSxTQUFTO1lBQ2hDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQzFCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLFdBQVcsVUFBVSxxQkFBcUIsU0FBUyxFQUFFO1NBQ3RFO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUF2Q0QsOEJBdUNDO0FBRU0sS0FBSyxVQUFVLFlBQVksQ0FBQyxLQUErQztJQUNoRixNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDO0lBQ3ZELElBQUksQ0FBQyxVQUFVLEVBQUU7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7S0FBRTtJQUVqRSxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUM7SUFDM0MsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsK0NBQStDLENBQUMsQ0FBQztLQUNsRTtJQUVELE1BQU0sRUFBRSxDQUFDLFlBQVksQ0FBQztRQUNwQixNQUFNLEVBQUUsVUFBVTtRQUNsQixHQUFHLEVBQUUsU0FBUztLQUNmLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNmLENBQUM7QUFiRCxvQ0FhQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOiBuby1jb25zb2xlXG5pbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgKiBhcyBhcGkgZnJvbSAnLi9hcGknO1xuXG5jb25zdCBzMyA9IG5ldyBBV1MuUzMoKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG9uRXZlbnQoZXZlbnQ6IEFXU0NES0FzeW5jQ3VzdG9tUmVzb3VyY2UuT25FdmVudFJlcXVlc3QpIHtcbiAgc3dpdGNoIChldmVudC5SZXF1ZXN0VHlwZSkge1xuICAgIGNhc2UgJ0NyZWF0ZSc6XG4gICAgY2FzZSAnVXBkYXRlJzpcbiAgICAgIHJldHVybiBhd2FpdCBwdXRPYmplY3QoZXZlbnQpO1xuXG4gICAgY2FzZSAnRGVsZXRlJzpcbiAgICAgIHJldHVybiBhd2FpdCBkZWxldGVPYmplY3QoZXZlbnQpO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwdXRPYmplY3QoZXZlbnQ6IEFXU0NES0FzeW5jQ3VzdG9tUmVzb3VyY2UuT25FdmVudFJlcXVlc3QpOiBQcm9taXNlPEFXU0NES0FzeW5jQ3VzdG9tUmVzb3VyY2UuT25FdmVudFJlc3BvbnNlPiB7XG4gIGNvbnN0IGJ1Y2tldE5hbWUgPSBldmVudC5SZXNvdXJjZVByb3BlcnRpZXNbYXBpLlBST1BfQlVDS0VUX05BTUVdO1xuICBpZiAoIWJ1Y2tldE5hbWUpIHsgdGhyb3cgbmV3IEVycm9yKCdcIkJ1Y2tldE5hbWVcIiBpcyByZXF1aXJlZCcpOyB9XG5cbiAgY29uc3QgY29udGVudHMgPSBldmVudC5SZXNvdXJjZVByb3BlcnRpZXNbYXBpLlBST1BfQ09OVEVOVFNdO1xuICBpZiAoIWNvbnRlbnRzKSB7IHRocm93IG5ldyBFcnJvcignXCJDb250ZW50c1wiIGlzIHJlcXVpcmVkJyk7IH1cblxuICAvLyBkZXRlcm1pbmUgdGhlIG9iamVjdCBrZXkgd2hpY2ggaXMgdGhlIHBoeXNpY2FsIElEIG9mIHRoZSByZXNvdXJjZS5cbiAgLy8gaWYgaXQgd2FzIG5vdCBwcm92aWRlZCBieSB0aGUgdXNlciwgd2UgZ2VuZXJhdGVkIGl0IHVzaW5nIHRoZSByZXF1ZXN0IElELlxuICBsZXQgb2JqZWN0S2V5ID0gZXZlbnQuUmVzb3VyY2VQcm9wZXJ0aWVzW2FwaS5QUk9QX09CSkVDVF9LRVldIHx8IGV2ZW50LkxvZ2ljYWxSZXNvdXJjZUlkICsgJy0nICsgZXZlbnQuUmVxdWVzdElkLnJlcGxhY2UoLy0vZywgJycpICsgJy50eHQnO1xuXG4gIC8vIHRyaW0gdHJhaWxpbmcgYC9gXG4gIGlmIChvYmplY3RLZXkuc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgb2JqZWN0S2V5ID0gb2JqZWN0S2V5LnN1YnN0cigxKTtcbiAgfVxuXG4gIGNvbnN0IHB1YmxpY1JlYWQgPSBldmVudC5SZXNvdXJjZVByb3BlcnRpZXNbYXBpLlBST1BfUFVCTElDXSB8fCBmYWxzZTtcblxuICBjb25zb2xlLmxvZyhgd3JpdGluZyBzMzovLyR7YnVja2V0TmFtZX0vJHtvYmplY3RLZXl9YCk7XG5cbiAgY29uc3QgcmVzcCA9IGF3YWl0IHMzLnB1dE9iamVjdCh7XG4gICAgQnVja2V0OiBidWNrZXROYW1lLFxuICAgIEtleTogb2JqZWN0S2V5LFxuICAgIEJvZHk6IGNvbnRlbnRzLFxuICAgIEFDTDogcHVibGljUmVhZCA/ICdwdWJsaWMtcmVhZCcgOiB1bmRlZmluZWQsXG4gIH0pLnByb21pc2UoKTtcblxuICAvLyBOT1RFOiB1cGRhdGVzIHRvIHRoZSBvYmplY3Qga2V5IHdpbGwgYmUgaGFuZGxlZCBhdXRvbWF0aWNhbGx5OiBhIG5ldyBvYmplY3Qgd2lsbCBiZSBwdXQgYW5kIHRoZW4gd2UgcmV0dXJuXG4gIC8vIHRoZSBuZXcgbmFtZS4gdGhpcyB3aWxsIHRlbGwgY2xvdWRmb3JtYXRpb24gdGhhdCB0aGUgcmVzb3VyY2UgaGFzIGJlZW4gcmVwbGFjZWQgYW5kIGl0IHdpbGwgaXNzdWUgYSBERUxFVEVcbiAgLy8gZm9yIHRoZSBvbGQgb2JqZWN0LlxuXG4gIHJldHVybiB7XG4gICAgUGh5c2ljYWxSZXNvdXJjZUlkOiBvYmplY3RLZXksXG4gICAgRGF0YToge1xuICAgICAgW2FwaS5BVFRSX09CSkVDVF9LRVldOiBvYmplY3RLZXksXG4gICAgICBbYXBpLkFUVFJfRVRBR106IHJlc3AuRVRhZyxcbiAgICAgIFthcGkuQVRUUl9VUkxdOiBgaHR0cHM6Ly8ke2J1Y2tldE5hbWV9LnMzLmFtYXpvbmF3cy5jb20vJHtvYmplY3RLZXl9YCxcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlT2JqZWN0KGV2ZW50OiBBV1NDREtBc3luY0N1c3RvbVJlc291cmNlLk9uRXZlbnRSZXF1ZXN0KSB7XG4gIGNvbnN0IGJ1Y2tldE5hbWUgPSBldmVudC5SZXNvdXJjZVByb3BlcnRpZXMuQnVja2V0TmFtZTtcbiAgaWYgKCFidWNrZXROYW1lKSB7IHRocm93IG5ldyBFcnJvcignXCJCdWNrZXROYW1lXCIgaXMgcmVxdWlyZWQnKTsgfVxuXG4gIGNvbnN0IG9iamVjdEtleSA9IGV2ZW50LlBoeXNpY2FsUmVzb3VyY2VJZDtcbiAgaWYgKCFvYmplY3RLZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BoeXNpY2FsUmVzb3VyY2VJZCBleHBlY3RlZCBmb3IgREVMRVRFIGV2ZW50cycpO1xuICB9XG5cbiAgYXdhaXQgczMuZGVsZXRlT2JqZWN0KHtcbiAgICBCdWNrZXQ6IGJ1Y2tldE5hbWUsXG4gICAgS2V5OiBvYmplY3RLZXksXG4gIH0pLnByb21pc2UoKTtcbn1cbiJdfQ==